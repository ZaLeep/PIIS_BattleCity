    def bfs(self, start, finish):
        j_s = int(start[0] / 32)
        i_s = int(start[1] / 32)
        j_f = int(finish[0] / 32)
        i_f = int(finish[1] / 32)
        if (start[0] - 13) // 32 != j_s:
            j_s = j_s * 2
        elif (start[0] + 13) // 32 != j_s:
            j_s = j_s * 2 + 2
        else:
            j_s = j_s * 2 + 1

        if (start[1] - 13) // 32 != i_s:
            i_s = i_s * 2
        elif (start[1] + 13) // 32 != i_s:
            i_s = i_s * 2 + 2
        else:
            i_s = i_s * 2 + 1

        if (finish[0] - 13) // 32 != j_f:
            j_f = j_f * 2
        elif (finish[0] + 13) // 32 != j_f:
            j_f = j_f * 2 + 2
        else:
            j_f = j_f * 2 + 1

        if (finish[1] - 13) // 32 != i_f:
            i_f = i_f * 2
        elif (finish[1] + 13) // 32 != i_f:
            i_f = i_f * 2 + 2
        else:
            i_f = i_f * 2 + 1

        q = []
        q.append([(i_s, j_s), (-1, -1)])
        v = []
        visited = []
        visited.append(q[0])
        prev = []
        count = 0
        f = True
        while q and f:
            curr = q[0][0]
            curr_prev = q[0][1]
            q.pop(0)
            v.append(curr)
            prev.append(curr_prev)
            if v[len(v) - 1][0] == i_f and v[len(v) - 1][1] == j_f:
                f = False
            if f and visited.count((curr[0] + 1, curr[1])) == 0 and self.check((curr[0] + 1, curr[1])):
                q.append([(curr[0] + 1, curr[1]), curr])
                visited.append((curr[0] + 1, curr[1]))
            if f and visited.count((curr[0], curr[1] + 1)) == 0 and self.check((curr[0], curr[1] + 1)):
                q.append([(curr[0], curr[1] + 1), curr])
                visited.append((curr[0], curr[1] + 1))
            if f and visited.count((curr[0] - 1, curr[1])) == 0 and self.check((curr[0] - 1, curr[1])):
                q.append([(curr[0] - 1, curr[1]), curr])
                visited.append((curr[0] - 1, curr[1]))
            if f and visited.count((curr[0], curr[1] - 1)) == 0 and self.check((curr[0], curr[1] - 1)):
                q.append([(curr[0], curr[1] - 1), curr])
                visited.append((curr[0], curr[1] - 1))
        path = []
        path.append((i_f, j_f))
        p = (prev[len(v) - 1][0], prev[len(v) - 1][1])
        if p == (-1, -1):
            return path
        f = True
        while f:
            i = v.index(p)
            path.append(p)
            p = (prev[i][0], prev[i][1])
            if p == (-1, -1):
                f = False
        if len(q) == 0:
            path.clear()
        return path

    def dfs(self, start, finish):
        j_s = int(start[0] / 16)
        i_s = int(start[1] / 16)
        j_f = int(finish[0] / 16)
        i_f = int(finish[1] / 16)
        path = []
        curr_path = []
        path_length = -1
        f = [True]
        self.dfs_tick((i_s, j_s), (i_f, j_f), path, f)
        if path[len(path) - 1] != (i_f, j_f):
            path.clear()
        return path

    def dfs_tick(self, curr, finish, c_p, f):
                c_p.append(curr)
        if curr == finish:
            f = False
            return
        else:
            if c_p.count((curr[0] + 1, curr[1])) == 0 and self.check((curr[0] + 1, curr[1])):
                self.dfs_tick((curr[0] + 1, curr[1]), finish, c_p, f)
                if c_p[len(c_p) - 1] == finish:
                    return
            if c_p.count((curr[0], curr[1] + 1)) == 0 and self.check((curr[0], curr[1] + 1)):
                self.dfs_tick((curr[0], curr[1] + 1), finish, c_p, f)
                if c_p[len(c_p) - 1] == finish:
                    return
            if c_p.count((curr[0] - 1, curr[1])) == 0 and self.check((curr[0] - 1, curr[1])):
                self.dfs_tick((curr[0] - 1, curr[1]), finish, c_p, f)
                if c_p[len(c_p) - 1] == finish:
                    return
            if c_p.count((curr[0], curr[1] - 1)) == 0 and self.check((curr[0], curr[1] - 1)):
                self.dfs_tick((curr[0], curr[1] - 1), finish, c_p, f)
                if c_p[len(c_p) - 1] == finish:
                    return

        if (finish[0] - 13) // 32 != j_f:
            j_f = j_f * 2
        elif (finish[0] + 13) // 32 != j_f:
            j_f = j_f * 2 + 2
        else:
            j_f = j_f * 2 + 1

        if (finish[1] - 13) // 32 != i_f:
            i_f = i_f * 2
        elif (finish[1] + 13) // 32 != i_f:
            i_f = i_f * 2 + 2
        else:
            i_f = i_f * 2 + 1

keys[pg.K_LEFT] or keys[pg.K_a]
keys[pg.K_UP] or keys[pg.K_w]
keys[pg.K_RIGHT] or keys[pg.K_d]
keys[pg.K_DOWN] or keys[pg.K_s]

# for i in range(len(enemies)):
        #     if not enemies[i].is_destroyed and enemies[i].path:
        #         for p in enemies[i].path:
        #             if color == 0:
        #                 pg.draw.circle(sc, (255, 0, 0), (16 * p[1], 16 * p[0]), 6, 6)
        #             if color == 1:
        #                 pg.draw.circle(sc, (0, 255, 0), (16 * p[1], 16 * p[0]), 4, 4)
        #             if color == 2:
        #                 pg.draw.circle(sc, (0, 0, 255), (16 * p[1], 16 * p[0]), 2, 2)
        #         color += 1

if tank1.path:
            for p in tank1.path:
                pg.draw.circle(sc, (255, 255, 255), (16 * p[1], 16 * p[0]), 2, 2)

#s_time = time.time()
#algh_time = (time.time() - s_time) * 1000
        #time_text = t_font.render(f"UCS: {algh_time:.3f} mic_sec", True, (0, 0, 0))

        # if tank1.move_times == 0:
        #     if not tank1.path or my_map.bottomright(tank1.rect.center) == tank1.path[0]:
        #         f = True
        #         while f:
        #             f = False
        #             tank1.path = my_map.A_star(tank1.rect.center, my_map.RandBlock())
        #             if len(tank1.path) == 1 and my_map.bottomright(tank1.rect.center) != tank1.path[0]:
        #                 f = True
        #     else:
        #         tank1.path = my_map.A_star(tank1.rect.center, tank1.path[0])
        #     if tank1.path:
        #         tank1.move_times = 16
        #         point1 = tank1.path[len(tank1.path) - 1]
        #         point2 = tank1.path[len(tank1.path) - 2]
        #         if point2[0] < point1[0]:
        #             tank1.move = 1
        #         elif point2[0] > point1[0]:
        #             tank1.move = 3
        #         elif point2[1] > point1[1]:
        #             tank1.move = 2
        #         else:
        #             tank1.move = 4

            if not tank1.is_fire:
                flag = False
                for e in enemies:
                    if not e.is_destroyed and abs(tank1.rect.center[1] - e.rect.center[1]) <= 14 and tank1.rect.center[0] > e.rect.center[0]:
                        flag = True
                if flag:
                    tank1.Fire("images\\fire.png")
            if not tank1.is_fire:
                flag = False
                for e in enemies:
                    if not e.is_destroyed and abs(tank1.rect.center[0] - e.rect.center[0]) <= 14 and tank1.rect.center[1] > e.rect.center[1]:
                        flag = True
                if flag:
                    tank1.Fire("images\\fire.png")
            if not tank1.is_fire:
                flag = False
                for e in enemies:
                    if not e.is_destroyed and abs(tank1.rect.center[1] - e.rect.center[1]) <= 14 and tank1.rect.center[0] < e.rect.center[0]:
                        flag = True
                if flag:
                    tank1.Fire("images\\fire.png")
            if not tank1.is_fire:
                flag = False
                for e in enemies:
                    if not e.is_destroyed and abs(tank1.rect.center[0] - e.rect.center[0]) <= 16 and tank1.rect.center[1] < e.rect.center[1]:
                        flag = True
                if flag:
                    tank1.Fire("images\\fire.png")

    def ucs(self, start, finish):
        j_s = int(start[0] / 32)
        i_s = int(start[1] / 32)
        j_f = int(finish[0] / 32)
        i_f = int(finish[1] / 32)
        if (start[0] - 13) // 32 != j_s:
            j_s = j_s * 2
        elif (start[0] + 13) // 32 != j_s:
            j_s = j_s * 2 + 2
        else:
            j_s = j_s * 2 + 1

        if (start[1] - 13) // 32 != i_s:
            i_s = i_s * 2
        elif (start[1] + 13) // 32 != i_s:
            i_s = i_s * 2 + 2
        else:
            i_s = i_s * 2 + 1

        if (finish[0] - 13) // 32 != j_f:
            j_f = j_f * 2
        elif (finish[0] + 13) // 32 != j_f:
            j_f = j_f * 2 + 2
        else:
            j_f = j_f * 2 + 1

        if (finish[1] - 13) // 32 != i_f:
            i_f = i_f * 2
        elif (finish[1] + 13) // 32 != i_f:
            i_f = i_f * 2 + 2
        else:
            i_f = i_f * 2 + 1
            
        path_matrix = []
        for i in range(len(self.small_digitmap)):
            line = []
            for j in range(len(self.small_digitmap[i])):
                line.append((-1, -1))
            path_matrix.append(line)
        q = [[(i_s, j_s), (-2, -2)]]
        f = True
        while q and f:
            curr = q[0][0]
            prev = q[0][1]
            q.pop(0)
            path_matrix[curr[0]][curr[1]] = prev
            if curr[0] == i_f and curr[1] == j_f:
                f = False
            if f and path_matrix[curr[0] + 1][curr[1]] == (-1, -1) and self.check((curr[0] + 1, curr[1])):
                path_matrix[curr[0] + 1][curr[1]] = (-2, -2)
                q.append([(curr[0] + 1, curr[1]), curr])
            if f and path_matrix[curr[0]][curr[1] + 1] == (-1, -1) and self.check((curr[0], curr[1] + 1)):
                path_matrix[curr[0]][curr[1] + 1] = (-2, -2)
                q.append([(curr[0], curr[1] + 1), curr])
            if f and path_matrix[curr[0] - 1][curr[1]] == (-1, -1) and self.check((curr[0] - 1, curr[1])):
                path_matrix[curr[0] - 1][curr[1]] = (-2, -2)
                q.append([(curr[0] - 1, curr[1]), curr])
            if f and path_matrix[curr[0]][curr[1] - 1] == (-1, -1) and self.check((curr[0], curr[1] - 1)):
                path_matrix[curr[0]][curr[1] - 1] = (-2, -2)
                q.append([(curr[0], curr[1] - 1), curr])
        path = []
        f = True
        curr = (i_f, j_f)
        if curr == (-1, -1):
            return path
        while q and f:
            path.append(path_matrix[curr[0]][curr[1]])
            if path_matrix[curr[0]][curr[1]] == (i_s, j_s):
                f = False
            else:
                curr = path_matrix[curr[0]][curr[1]]
        return path

                if event.key == pg.K_SPACE:
                    if not tank1.is_fire:
                        tank1.Fire("images\\fire.png")
                        
        keys = pg.key.get_pressed()
        if keys[pg.K_LEFT] or keys[pg.K_a]:
            tank1.move = 4
        elif keys[pg.K_UP] or keys[pg.K_w]:
            tank1.move = 1
        elif keys[pg.K_RIGHT] or keys[pg.K_d]:
            tank1.move = 2
        elif keys[pg.K_DOWN] or keys[pg.K_s]:
            tank1.move = 3